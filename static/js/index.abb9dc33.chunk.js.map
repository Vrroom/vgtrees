{"version":3,"sources":["utils/reacthelpers.js","utils/palette.js","utils/math.js","components/iconbutton.jsx","icons/contact.svg","icons/help.svg","components/helpmodal.jsx","components/nav.jsx","utils/eventModifier.js","components/graphicdisplay.jsx","icons/scissors.svg","utils/graph.js","components/groupui.jsx","components/slides.jsx","App.js","index.js","utils/misc.js","utils/svgtags.js","utils/svg.js"],"names":["propertiesToCamelCase","node","properties","rest","newKeys","Object","keys","map","camelCase","oldValues","values","newProperties","i","length","key","val","node2ReactElement","children","React","createElement","tagName","uuidv4","rgb2string","rgb","a","r","g","b","concat","selectColor","highlightColor","nodeColors","mergeAllowed","mergeNotAllowed","suggestedGroup","group","contractedGroup","hover","alphaBlink","t","Math","sin","IconButton","Component","constructor","props","super","increment","this","setState","prevState","x","state","highlight","counter","setInterval","componentDidUpdate","prevProps","isUndef","clearInterval","componentWillUnmount","render","active","onClick","variant","style","alpha","color","Row","className","Col","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","name","Button","_defs","_path","_path2","_path3","_path4","_path5","_path6","_extends","assign","bind","target","arguments","source","prototype","hasOwnProperty","call","apply","SvgContact","_ref","svgRef","title","width","height","viewBox","ref","id","fill","stroke","strokeMiterlimit","strokeWidth","strokeLinecap","strokeLinejoin","transform","d","ForwardRef","forwardRef","SvgHelp","HelpModal","onHide","Modal","size","centered","scrollable","animation","Header","Title","Container","md","Body","ListGroup","Item","sendEmail","window","open","Nav","setShow","useState","Fragment","Navbar","Brand","Toggle","Collapse","Help","ContactUs","addStopPropagation","eventHandler","event","stopPropagation","validHighlight","hl","GraphicDisplay","graphicElements","imageURL","imageHeight","imageWidth","annotations","y","h","w","newHeight","newWidth","floor","newY","getAdjustedPlacement","elements","fill-opacity","href","anno","idx","annotation","index","selected","includes","type","line1","x1","y1","x2","y2","line2","cornerProps","draggable","onMouseDown","evt","onDragStartRect","onMouseMove","onDragRect","onMouseUp","onDragEndRect","onClickRect","fillOpacity","strokeDasharray","createAnnotationElement","closeElement","onClickCross","rx","ry","push","paths","defs","graphic","path","events","onPointerOver","onPointerLeave","pathElement","graph","selectedId","nodes","flat","isStyleNotNone","coverElement","splice","svg","onMouseOver","onMouseOverSvg","cursor","_g","createEmptyGraph","getWidthHeight","minRadius","forest","cloneDeep","contracted","computeFill","radius","nodeRadius","computeNodeRadii","updateVisualProperties","random","pathWidth","bboxes","pathHeight","visible","links","pathIds","relevantBoxes","box","coveringBBox","svgBox","ratio","min","numRoots","filter","isRoot","sqrt","max","parent","SvgScissors","RECTANGLE_CLICK_TYPES","move","mapClickToClickType","click","rect","dx","dy","updatedAnnotation","initClickData","initAnnotation","initClick","dragType","ix","iy","ox","oy","cx","cy","abs","makeRectFromOppositeCorners","nx","ny","GroupUI","handleFileChange","file","files","URL","createObjectURL","preprocessSVG","selectedFile","img","Image","onload","src","openFileDialog","fileInputRef","current","handleDragOver","preventDefault","handleDrop","dataTransfer","handleFiles","handleKeyPress","newAnnotations","undefined","tryNotifyParent","msg","notifyParent","uploadImageAndClick","clickIndex","nothingIn","formData","FormData","append","JSON","stringify","fetch","method","body","then","response","json","data","handleClick","clientX","clientY","dragActive","clickPoint","convertCoordinates","handleMouseOverSvg","clickRegistry","cursorMoved","handlePointerOver","handlePointerLeave","handleCropClick","rectangleAnnotations","blob","url","Blob","link","document","setAttribute","appendChild","parentNode","removeChild","revokeObjectURL","handleDragStartRect","handleDragRect","handleClickRect","handleDragEndRect","setTimeout","handleClear","disableClear","skipClear","createRef","filename","svgString","componentDidMount","text","addEventListener","setHighlight","setShowNext","removeEventListener","highlightSvg","highlightGroup","highlightGraph","Spinner","role","onChange","display","Crop","Slides","handleCrossClick","crossClicked","App","ReactDOM","getElementById","thing","svgTags","extractDims","dim","replace","extractViewBox","vb","split","parseFloat","findBBox","svgElement","createElementNS","p","pathBox","lastChild","getBoundingClientRect","pt","di","elementId","ctm","getScreenCTM","convertDimensions","remove","degenerateBBox","bbox","parseTree","parse","tree","stack","helper","reduceRight","forEach","pop","slice","flattenTree","_","treeMap","fn","c","normalizeGraphic","maxX","distance","e","f","styleProperty","toLowerCase"],"mappings":"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","file":"static/js/index.abb9dc33.chunk.js","sourcesContent":["/**\n * @file Helper functions for React\n *\n * @author Sumit Chaturvedi\n */\nimport React from \"react\";\nimport { camelCase } from \"lodash\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n/**\n * Convert all properties to camel case.\n *\n * SVG attributes usually have an hyphen in the\n * middle. This is not allowed when we use them \n * as React components.\n *\n * @param   {Object}  node - A node in the SVG parse tree\n *\n * @return  {Object}  Node with property names changed\n * to camel case.\n */\nfunction propertiesToCamelCase(node) {\n  let { properties, ...rest } = node;\n  if (!properties) {\n    return rest;\n  }\n  let newKeys = Object.keys(properties).map(camelCase);\n  let oldValues = Object.values(properties);\n  let newProperties = {};\n  for (let i = 0; i < oldValues.length; i++) {\n    const key = newKeys[i];\n    const val = oldValues[i];\n    newProperties[key] = val;\n  }\n  return { ...rest, properties: newProperties };\n}\n\nfunction node2ReactElement (node) { \n  let children = [];\n  if (typeof node.children !== \"undefined\") {\n    children = node.children.map(node2ReactElement);\n  }\n  return React.createElement(\n    node.tagName,\n    {\n      ...node.properties,\n      key: uuidv4()\n    },\n    children\n  );\n}\n\nexport {\n  propertiesToCamelCase,\n  node2ReactElement\n};\n","/**\n * @file Color palette for different components.\n *\n * @author Sumit Chaturvedi\n */\n\nfunction rgb2string(rgb, a) {\n  const [r, g, b] = rgb;\n  return `rgb(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst selectColor = [187, 225, 250];\nconst highlightColor = [231, 48, 91];\n\nconst nodeColors = {\n  mergeAllowed: [155, 222, 172],\n  mergeNotAllowed: [231, 48, 91],\n  suggestedGroup: [255, 248, 205],\n  group: [243, 249, 251],\n  contractedGroup: [214, 224, 240],\n  hover: [144, 136, 212]\n};\n\nexport { selectColor, highlightColor, nodeColors, rgb2string };\n","function alphaBlink (t) {\n  return (Math.sin(0.3 * t) + 1) / 2;\n}\n\nexport default alphaBlink;\n","import React, { Component } from \"react\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport { highlightColor, rgb2string } from \"../utils/palette\";\nimport { isUndef } from \"../utils/misc.js\";\nimport alphaBlink from \"../utils/math\";\n\nclass IconButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: 0,\n    };\n    if (props.highlight) {\n      this.counter = setInterval(this.increment, 40);\n    }\n  }\n\n  increment = () => {\n    this.setState((prevState) => {\n      const { x } = prevState;\n      return { x: x + 1 };\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.highlight !== this.props.highlight) {\n      if (this.props.highlight) {\n        this.counter = setInterval(this.increment, 40);\n      } else if (!isUndef(this.counter)) {\n        clearInterval(this.counter);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.counter);\n  }\n\n  render() {\n    const { active, children, highlight, onClick } = this.props;\n    let { variant } = this.props;\n    if (isUndef(variant)) {\n      variant = \"light\";\n    }\n    const style = {};\n    if (highlight) {\n      const alpha = alphaBlink(this.state.x);\n      const color = rgb2string(highlightColor, alpha);\n      style[\"boxShadow\"] = `0 0 0 .6rem ${color}`;\n    }\n    return (\n      <Row className=\"mt-3 mb-3\" >\n        <Col className=\"d-flex justify-content-center\">\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 250, hide: 400 }}\n            overlay={<Tooltip>{this.props.name}</Tooltip>}\n          >\n            <div className={active ? \"visible\" : \"invisible\"}>\n              <Button variant={variant} style={style} onClick={onClick}>\n                {children}\n              </Button>\n            </div>\n          </OverlayTrigger>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default IconButton;\n","var _defs, _path, _path2, _path3, _path4, _path5, _path6;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from \"react\";\nconst SvgContact = _ref => {\n  let {\n    svgRef,\n    title,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"path2\",\n    fill: \"none\",\n    stroke: \"#000000\",\n    strokeMiterlimit: 10,\n    strokeWidth: 1.39508116,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    transform: \"matrix(1 0 0 1 0.61016949 0.40677966)\",\n    d: \"M 3.8145914 8.9385074 L 0.68636641 11.820128 C 0.58874013 11.647163 0.52737504 11.418466 0.52737504 11.173006 L 0.52737504 3.7785121\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"path4\",\n    fill: \"none\",\n    stroke: \"#000000\",\n    strokeMiterlimit: 10,\n    strokeWidth: 1.39508116,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    transform: \"matrix(1 0 0 1 0.61016949 0.40677966)\",\n    d: \"M 14.457251 3.7645655 L 14.457251 11.173006 C 14.457251 11.412887 14.401461 11.633244 14.303838 11.806182 L 11.147274 8.915886\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"line6\",\n    fill: \"none\",\n    stroke: \"#000000\",\n    strokeMiterlimit: 10,\n    strokeWidth: 1.39508116,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    transform: \"matrix(1 0 0 1 0.61016949 0.40677966)\",\n    d: \"M 0.70472015 3.6639546 L 0.68731478 3.6530763\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"path8\",\n    fill: \"none\",\n    stroke: \"#000000\",\n    strokeMiterlimit: 10,\n    strokeWidth: 1.39508116,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    transform: \"matrix(1 0 0 1 0.61016949 0.40677966)\",\n    d: \"M 4.9679762 7.8760266 L 6.2148033 9.0280168 C 6.281747 9.0893819 6.3486908 9.142379 6.4156345 9.1870081 C 7.0934677 9.6890862 7.8828181 9.6890862 8.557862 9.1842188 C 8.6220164 9.1395897 8.6889601 9.0838032 8.7503252 9.0280168 L 10.00552 7.870448\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"path12\",\n    fill: \"none\",\n    stroke: \"#000000\",\n    strokeMiterlimit: 10,\n    strokeWidth: 1.39508116,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    transform: \"matrix(1 0 0 1 0.61016949 0.40677966)\",\n    d: \"M 10.86028 8.6531318 L 14.303838 11.806182 C 14.186687 12.02096 14.005381 12.160426 13.804549 12.160426 L 1.1800765 12.160426 C 0.9848239 12.160426 0.80630727 12.029328 0.68636641 11.820128 L 4.0553378 8.7167284\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"path16\",\n    fill: \"none\",\n    stroke: \"#000000\",\n    strokeMiterlimit: 10,\n    strokeWidth: 1.39508116,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    transform: \"matrix(1 0 0 1 0.61016949 0.40677966)\",\n    d: \"M 14.457251 3.7645655 L 10.005492 7.870448 L 8.7502973 9.0280168 C 8.6889322 9.0838032 8.6219885 9.1395897 8.5578341 9.1842188 C 7.8828181 9.6890862 7.0934398 9.6890862 6.4156066 9.1870081 C 6.3486629 9.142379 6.2817191 9.0893819 6.2147754 9.0280168 L 4.9679483 7.8760266 L 0.52734715 3.7785121 C 0.53850445 3.7617761 0.55245105 3.7422511 0.56639765 3.7227261 C 0.6835492 3.5553663 0.84254057 3.4549507 1.0154786 3.4549507 L 13.980249 3.4549507 C 14.144819 3.4549507 14.30381 3.5525767 14.418145 3.7087791 C 14.432145 3.7255151 14.446095 3.7450401 14.457255 3.7645651 Z\"\n  })));\n};\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgContact, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/contact.b4cd5257.svg\";\nexport { ForwardRef as ReactComponent };","var _defs, _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from \"react\";\nconst SvgHelp = _ref => {\n  let {\n    svgRef,\n    title,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"path2413\",\n    fill: \"#000000\",\n    stroke: \"none\",\n    transform: \"matrix(0.07875 0 0 0.07875 0.17937861 0.14904852)\",\n    d: \"M 100 0 C 44.8 0 0 44.8 0 100 C 0 155.2 44.8 200 100 200 C 155.2 200 200 155.2 200 100 C 200 44.8 155.2 0 100 0 Z M 100 12.812 C 148.13 12.812 187.19 51.87 187.19 100 C 187.19 148.13 148.13 187.19 100 187.19 C 51.87 187.19 12.812 148.13 12.812 100 C 12.812 51.87 51.87 12.812 100 12.812 Z M 101.47 34.062 C 96.02 34.092 90.817 34.799 86.188 36.125 C 81.489 37.471 77.062 39.609 73.312 42.344 C 70.074 44.706 66.979 47.735 64.625 50.875 C 60.466 56.424 58.164 62.526 57.562 69.562 C 57.522 70.03 57.492 70.43 57.5 70.438 C 57.516 70.454 79.202 73.125 79.312 73.125 C 79.365 73.125 79.425 72.891 79.594 72.188 C 81.535 64.103 85.08 58.667 90.562 55.375 C 94.882 52.781 100.37 51.763 106.34 52.406 C 109.08 52.701 111.55 53.366 113.72 54.406 C 116.43 55.707 118.9 57.767 120.66 60.219 C 122.2 62.375 123.12 64.803 123.41 67.531 C 123.49 68.29 123.46 70.011 123.38 70.75 C 123.15 72.576 122.68 74.128 121.88 75.719 C 121.07 77.316 120.4 78.233 119.12 79.531 C 117.09 81.608 113.94 84.36 108.34 88.938 C 104.74 91.882 102.3 94.094 100.22 96.281 C 95.277 101.46 93.029 105.35 91.656 111 C 90.751 114.72 90.4 118.55 90.5 124.19 C 90.525 125.59 90.562 126.92 90.562 127.16 L 90.562 127.59 L 112.16 127.59 L 112.19 125.19 C 112.22 121.92 112.4 119.82 112.75 117.78 C 113.32 114.51 114.18 112.78 116.69 109.97 C 118.29 108.17 120.39 106.21 123.62 103.5 C 128.39 99.509 131.73 96.51 134.88 93.375 C 139.79 88.468 142.34 85.115 144.16 81.188 C 145.59 78.096 146.38 75.022 146.62 71.656 C 146.68 70.84 146.69 68.626 146.62 67.688 C 146.17 60.645 143.52 54.435 138.47 48.656 C 137.67 47.747 135.69 45.769 134.75 44.938 C 129.79 40.544 124.06 37.585 117.19 35.844 C 113 34.782 108.96 34.244 103.84 34.094 C 103.06 34.071 102.25 34.058 101.47 34.062 Z M 90.562 137.662 L 90.562 159.662 L 112.56 159.662 L 112.56 137.662 Z\"\n  })));\n};\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgHelp, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/help.40cbd066.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\n\nfunction HelpModal(props) {\n  const { show, onHide } = props;\n  return (\n    <Modal show={show} onHide={onHide} size=\"lg\" centered scrollable animation>\n      <Modal.Header>\n        <Modal.Title>\n          <Container className=\"px-5\">\n            <Row>\n              <Col md=\"auto\">Help</Col>\n            </Row>\n          </Container>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Container>\n          <Row className=\"p-3\">\n            <Col className=\"col-8\">\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item className=\"p-2\">\n                  <p className=\"lead\">Group related objects</p>\n                </ListGroup.Item>\n                <ListGroup.Item className=\"p-2\">\n                  <p className=\"lead\">Click on objects to select</p>\n                </ListGroup.Item>\n                <ListGroup.Item className=\"p-2\">\n                  <p className=\"lead\">\n                    Clear selection by tapping anywhere on screen\n                  </p>\n                </ListGroup.Item>\n                <ListGroup.Item className=\"p-2\">\n                  <p className=\"lead\">\n                    Click on the group icon to create a group\n                  </p>\n                </ListGroup.Item>\n                <ListGroup.Item className=\"p-2\">\n                  <p className=\"lead\">\n                    Undo a node by double-clicking on the bubble\n                  </p>\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nexport default HelpModal;\n","import React, { useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport IconButton from \"./iconbutton\";\nimport { ReactComponent as ContactUs } from \"../icons/contact.svg\";\nimport { ReactComponent as Help } from \"../icons/help.svg\";\nimport HelpModal from \"./helpmodal\";\n\nfunction sendEmail() {\n  window.open(\n    \"mailto:sumit.chaturvedi@gmail.com?subject=Comic Annotation App\"\n  );\n}\n\nfunction Nav(props) {\n  const [show, setShow] = useState(false);\n  return (\n    <>\n      <Navbar>\n        <Container className=\"border-bottom\">\n          <Navbar.Brand>\n            <h1>ComicCut</h1>\n          </Navbar.Brand>\n          <Navbar.Toggle />\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Row>\n              <Col>\n                <IconButton\n                  name=\"Help\"\n                  active={true}\n                  onClick={() => setShow(true)}\n                >\n                  <Help />\n                </IconButton>\n              </Col>\n              <Col>\n                <IconButton name=\"Contact Us\" active={true} onClick={sendEmail}>\n                  <ContactUs />\n                </IconButton>\n              </Col>\n            </Row>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      <HelpModal show={show} onHide={() => setShow(false)} />\n    </>\n  );\n}\n\nexport default Nav;\n","/**\n * @file Functions which modify the event handler functions.\n *\n * @author Sumit Chaturvedi\n */\n\n/**\n * Invoke stopPropagation and handle the event\n * as before.\n *\n * @param   {function}  eventHandler\n *\n * @return  {function}  An event handler which stops the\n * propagation of the event to the parent and\n * then invokes the eventHandler.\n */\nfunction addStopPropagation(eventHandler) {\n  const newEventHandler = event => {\n    event.stopPropagation();\n    eventHandler(event);\n  };\n  return newEventHandler;\n}\n\nexport default addStopPropagation;\n","/**\n * @file GraphicDisplay class implementation.\n *\n * @author Sumit Chaturvedi\n */\nimport React, { Component } from \"react\";\nimport addStopPropagation from \"../utils/eventModifier\";\nimport { selectColor, highlightColor, rgb2string } from \"../utils/palette\";\nimport { isStyleNotNone } from \"../utils/svg\";\nimport { node2ReactElement } from \"../utils/reacthelpers\";\nimport { isUndef } from \"../utils/misc\";\nimport alphaBlink from \"../utils/math\";\n\nfunction validHighlight(hl) {\n  return !isUndef(hl) && hl.length > 0;\n}\n\nfunction coverElement(path, key, props, t) {\n  const { graph, selected, hover, highlight } = props;\n  const selectedId = selected.map((i) => graph.nodes[i].paths).flat();\n  if (\n    !validHighlight(highlight) &&\n    !selectedId.includes(key) &&\n    !hover.includes(key)\n  ) {\n    return null;\n  }\n  const { onClick } = props;\n  let color = \"none\";\n  if (validHighlight(highlight) && highlight.includes(key)) {\n    color = rgb2string(highlightColor, alphaBlink(t));\n  } else if (selectedId.includes(key)) {\n    color = rgb2string(selectColor, 1);\n  } else if (hover.includes(key)) {\n    color = rgb2string(selectColor, 0.6);\n  }\n  const fill = isStyleNotNone(\"fill\", path.properties) ? color : \"none\";\n  const stroke = isStyleNotNone(\"stroke\", path.properties) ? color : \"none\";\n  return React.createElement(path.tagName, {\n    ...path.properties,\n    id: \"cover-element\",\n    fill,\n    stroke,\n    onClick: addStopPropagation((evt) => onClick(evt, key)),\n  });\n}\n\nfunction getAdjustedPlacement (imageWidth, imageHeight) { \n  if (imageHeight > imageWidth) { \n    const newHeight = 100;\n    const newWidth = Math.floor(100 * (imageWidth / imageHeight)); \n    const newY = 0; \n    const newX = Math.floor((100 - newWidth) / 2); \n    return { h: newHeight, w: newWidth, x: newX, y: newY }; \n  } else {\n    const newWidth = 100;\n    const newHeight = Math.floor(100 * (imageHeight / imageWidth)); \n    const newX = 0; \n    const newY = Math.floor((100 - newHeight) / 2); \n    return { h: newHeight, w: newWidth, x: newX, y: newY }; \n  }\n\n}\n\nfunction pathElement(path, key, events) {\n  const { onClick, onPointerOver, onPointerLeave } = events;\n  return React.createElement(path.tagName, {\n    ...path.properties,\n    id: `path-${key}`,\n    onClick: addStopPropagation((evt) => onClick(evt, key)),\n    onPointerOver: addStopPropagation(() => onPointerOver(key)),\n    onPointerLeave: addStopPropagation(() => onPointerLeave(key)),\n  });\n}\n\nfunction createAnnotationElement (annotation, index, props) { \n  // this is basically an svg cross using two lines\n  if (isUndef(annotation)) {\n    return <></>; \n  }\n  const { selected } = props; \n  const color = selected.includes(index) ? \"red\" : \"cyan\"; \n  const { type } = annotation;\n  const crossSize = 0.5; \n  if (type === \"point\") {\n    const { x, y } = annotation;\n    const line1 = {\n      x1: x - crossSize,\n      y1: y,\n      x2: x + crossSize,\n      y2: y,\n    };\n    const line2 = {\n      x1: x,\n      y1: y - crossSize,\n      x2: x,\n      y2: y + crossSize,\n    };\n    return (\n      <g>\n        <line {...line1} stroke={ color } strokeWidth=\"0.5\" strokeLinecap=\"round\" />\n        <line {...line2} stroke={ color } strokeWidth=\"0.5\" strokeLinecap=\"round\" />\n      </g>\n    );\n  } else {\n    const { x, y, width, height } = annotation;\n    const cornerProps = { \n      stroke: color, \n      strokeWidth: \"0.8\", \n      strokeLinecap: \"round\"\n    } \n        // onDragStart={addStopPropagation((evt) => props.onDragStartRect(evt, annotation, index))}\n    return (\n      <g \n        key={`annotation-${index}`} \n        draggable=\"true\"\n        onMouseDown={addStopPropagation((evt) => props.onDragStartRect(evt, annotation, index))}\n        onMouseMove={addStopPropagation((evt) => props.onDragRect(evt, annotation, index))} \n        onMouseUp={addStopPropagation((evt) => props.onDragEndRect(evt, annotation, index))}\n        onClick={addStopPropagation((evt) => props.onClickRect(evt, annotation, index))}\n      >\n        <line\n          x1={x}\n          y1={y}\n          x2={x + crossSize}\n          y2={y}\n          {...cornerProps}\n        />\n        <line\n          x1={x}\n          y1={y}\n          x2={x}\n          y2={y + crossSize}\n          {...cornerProps}\n        />\n        <line\n          x1={x + width}\n          y1={y}\n          x2={x + width - crossSize}\n          y2={y}\n          {...cornerProps}\n        />\n        <line\n          x1={x + width}\n          y1={y}\n          x2={x + width}\n          y2={y + crossSize}\n          {...cornerProps}\n        />\n        <line\n          x1={x}\n          y1={y + height}\n          x2={x + crossSize}\n          y2={y + height}\n          {...cornerProps}\n        />\n        <line\n          x1={x}\n          y1={y + height}\n          x2={x}\n          y2={y + height - crossSize}\n          {...cornerProps}\n        />\n        <line\n          x1={x + width}\n          y1={y + height}\n          x2={x + width - crossSize}\n          y2={y + height}\n          {...cornerProps}\n        />\n        <line\n          x1={x + width}\n          y1={y + height}\n          x2={x + width}\n          y2={y + height - crossSize}\n          {...cornerProps}\n        />\n        <rect \n          x={x} \n          y={y} \n          width={width} \n          height={height} \n          style={{ \n            fill: color, \n            fillOpacity: 0.3,\n            stroke: color, \n            strokeDasharray: \"1,1\", \n            strokeWidth: 0.2\n          }} \n        />\n      </g>\n    );\n  }\n}\n\nclass GraphicDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: 0,\n    };\n    if (validHighlight(props.highlight)) {\n      this.counter = setInterval(this.increment, 40);\n    }\n  }\n\n  increment = () => {\n    this.setState((prevState) => {\n      const { x } = prevState;\n      return { x: x + 1 };\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    const { highlight } = this.props;\n    if (!validHighlight(prevProps.highlight) && validHighlight(highlight)) {\n      this.counter = setInterval(this.increment, 40);\n    } else if (\n      validHighlight(prevProps.highlight) &&\n      !validHighlight(highlight)\n    ) {\n      clearInterval(this.counter, 40);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.counter);\n  }\n\n  /**\n   * Create React Elements for SVG paths.\n   *\n   * @returns {Array}   List of graphic elements as React Elements.\n   */\n  graphicElements = () => {\n    const { imageURL, imageHeight, imageWidth, annotations} = this.props;\n    if (!isUndef(imageURL)) { \n      const { x, y, h, w } = getAdjustedPlacement(imageWidth, imageHeight); \n      const background = <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"gray\" fill-opacity=\"0.5\" />; \n      const imageJSX = <image href={ imageURL } x={ x } y={ y } height={ h } width={ w }/>;\n      let elements = [background, imageJSX]; \n      elements = elements.concat(annotations.map((anno, idx) => createAnnotationElement(anno, idx, this.props))); \n      const closeElement = (\n        <g onClick={addStopPropagation((evt) => this.props.onClickCross())} >\n          <rect x=\"95\" y=\"0\" width=\"5\" height=\"5\" fill=\"#999999\" rx=\"1\" ry=\"1\" />\n          <line x1=\"96.5\" y1=\"1.5\" x2=\"98.5\" y2=\"3.5\" stroke=\"#666666\" strokeWidth=\"0.5\" strokeLinecap=\"round\"/>\n          <line x1=\"98.5\" y1=\"1.5\" x2=\"96.5\" y2=\"3.5\" stroke=\"#666666\" strokeWidth=\"0.5\" strokeLinecap=\"round\"/>\n        </g>\n      );\n      elements.push(closeElement);\n      return elements; \n    }\n    const { paths, defs } = this.props.graphic;\n    const elements = paths.map((path, key) => {\n      return (\n        <g key={`path-group-${key}`}>\n          {pathElement(path, key, this.props)}\n          {coverElement(path, key, this.props, this.state.x)}\n        </g>\n      );\n    });\n    if (typeof defs !== \"undefined\") {\n      elements.splice(0, 0, node2ReactElement(defs));\n    }\n    return elements;\n  };\n\n  render() {\n    const { svg } = this.props.graphic;\n    const children = this.graphicElements();\n    return React.createElement(\n      svg.tagName,\n      { ...svg.properties, id: \"svg-element\", onClick: this.props.onClick, onMouseOver:this.props.onMouseOverSvg, style: { cursor: 'grab' } },\n      children\n    );\n  }\n}\n\nexport default GraphicDisplay;\n","var _defs, _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from \"react\";\nconst SvgScissors = _ref => {\n  let {\n    svgRef,\n    title,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"g17\",\n    transform: \"matrix(0.5180123 0 0 0.5180123 0.2188727 0.12047707)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"path1\",\n    fill: \"#000000\",\n    stroke: \"none\",\n    d: \"M 26.311 23.224 C 25.499 21.808 24.239002 20.849 22.909 20.488 C 21.858 20.201 20.768 20.289 19.825 20.822 L 17.02 15.918 C 18.756 12.455 22.653 4.691 23.352 3.467 C 24.258 1.884 22.637 0 22.637 0 L 15.277001 12.872 L 7.919 0 C 7.919 0 6.299 1.884 7.204 3.466 C 7.904 4.691 11.802001 12.454 13.536 15.917 L 10.732 20.821 C 9.789 20.288 8.697 20.2 7.648 20.487 C 6.316 20.848 5.057 21.807 4.245 23.223 C 2.787 25.769999 3.344 28.825 5.484 30.05 C 6.433 30.595001 7.532 30.682 8.591 30.395 C 9.92 30.032 11.182001 29.073002 11.993 27.659998 C 12.348 27.036 12.583 26.383 12.703 25.733997 L 12.703 25.735003 C 12.704 25.73 12.704 25.725 12.709 25.72 C 12.716 25.665998 12.726 25.612 12.731 25.552998 C 13.332999 21.514 14.471001 19.451 15.276 18.449 C 16.083 19.451 17.222 21.513 17.823 25.552998 C 17.829 25.612 17.839 25.665998 17.844 25.72 C 17.848 25.725 17.848 25.73 17.85 25.735003 L 17.85 25.733997 C 17.971 26.382 18.205 27.036 18.559 27.659998 C 19.371 29.073002 20.633 30.032 21.963001 30.395 C 23.021997 30.682 24.121 30.595001 25.072 30.05 C 27.213 28.825 27.768 25.771 26.311 23.224 Z M 9.911 26.468 C 9.451 27.271 8.722 27.876 7.963 28.083 C 7.6249995 28.175 7.129 28.231 6.674 27.97 C 5.704 27.415 5.5450006 25.784 6.328 24.414001 C 6.796 23.602 7.505 23.011 8.278 22.8 C 8.613 22.709 9.109 22.653997 9.566 22.913 C 10.537 23.469997 10.695 25.097 9.911 26.468 Z M 23.881 27.97 C 23.425999 28.232 22.932 28.175 22.594 28.083 C 21.834 27.876 21.106 27.271 20.645 26.468 C 19.862 25.097 20.02 23.469997 20.991 22.913 C 21.448 22.653 21.944 22.709 22.28 22.8 C 23.051 23.011 23.762 23.602 24.227001 24.414001 C 25.01 25.784 24.852 27.415 23.881 27.97 Z\"\n  }))));\n};\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgScissors, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/scissors.3874cae0.svg\";\nexport { ForwardRef as ReactComponent };","/*\n * @file Functions for manipulating the graph over SVG paths.\n *\n * @author Sumit Chaturvedi\n */\nimport { getWidthHeight, coveringBBox, distance } from \"./svg\";\nimport { disjoint } from \"./listOps\";\nimport { cloneDeep } from \"lodash\";\nimport { nodeColors } from \"./palette\";\n\nfunction descendants(graph, id) {\n  const { nodes } = graph;\n  const helper = a => {\n    if (nodes[a].children.length > 0) {\n      const list = nodes[a].children.map(helper).flat();\n      list.push(a);\n      return list;\n    }\n    return nodes[a].paths;\n  };\n  const all = helper(id);\n  all.pop();\n  return all;\n}\n\n/*\n * Calculates the depth of the node in graph.\n *\n * @param   {Number}  nodeId - id of node whose depth has\n * to be calculated.\n * @param   {Object}  graph - Forest.\n */\nfunction depth(nodeId, graph) {\n  const parentId = graph.nodes[nodeId].parent;\n  if (!isRoot(nodeId, graph)) {\n    return 1 + depth(parentId, graph);\n  }\n  return 0;\n}\n\n/*\n * Calculate paths in each subtree.\n *\n * The nodes form a hierarchy over a set\n * of paths. Hence each node in the hierarchy\n * has a subset of SVG paths associated with them.\n *\n * For example, the root of the tree will contain\n * all SVG paths.\n *\n * For each node in nodes, this subset is calculated\n * and the node's path property is updated with this\n * subset.\n *\n * @param   {Object}  nodes - List of graph nodes.\n *\n * @return  {Object}  A list of graph nodes populated with the\n * correct path subsets.\n */\nfunction gatherSubtreePaths(nodes) {\n  const helper = a => {\n    if (nodes[a].children.length > 0) {\n      nodes[a].paths = nodes[a].children.map(helper).flat();\n    }\n    return nodes[a].paths;\n  };\n  nodes.forEach((_, i) => helper(i));\n  return nodes;\n}\n\n/*\n * Check if two nodes a and b are connected in a graph.\n *\n * @param   {Number}  a - Id for node a.\n * @param   {Number}  b - Id for node b.\n * @param   {Object}  graph - Graph of the form { nodes, links }.\n * @param   {boolean} directed - Whether the graph is directed.\n *\n * @returns {boolean} Whether the nodes are connected or not.\n */\nfunction connected(a, b, graph, edgeFilter, directed) {\n  const neighbors = id => {\n    const edges = graph.links.filter(edgeFilter);\n    let connectedEdges;\n    if (directed) {\n      connectedEdges = edges.filter(e => e.source.id === id);\n    } else {\n      connectedEdges = edges.filter(\n        e => e.source.id === id || e.target.id === id\n      );\n    }\n    return connectedEdges.map(e =>\n      e.source.id === id ? e.target.id : e.source.id\n    );\n  };\n  let marked = new Array(graph.nodes.length).fill(false);\n  const dfs = s => {\n    marked[s] = true;\n    if (s === b) {\n      return true;\n    }\n    return neighbors(s)\n      .filter(n => !marked[n])\n      .map(dfs)\n      .some(x => x);\n  };\n  return dfs(a);\n}\n\nfunction connectedComponents(graph) {\n  const neighbors = id => {\n    let connectedEdges = graph.links.filter(\n      e => e.source === id || e.target === id\n    );\n    return connectedEdges.map(e => (e.source === id ? e.target : e.source));\n  };\n  let components = new Array(graph.nodes.length).fill(-1);\n  let number = 0;\n  let groups = [];\n  const dfs = s => {\n    if (components[s] !== -1) {\n      return;\n    }\n    components[s] = number;\n    groups[groups.length - 1].push(s);\n    neighbors(s).map(dfs);\n  };\n  for (let s = 0; s < graph.nodes.length; s++) {\n    if (components[s] === -1) {\n      groups.push([]);\n      dfs(s);\n      number += 1;\n    }\n  }\n  return groups;\n}\n\n/*\n * Create an empty graph from a graphic.\n *\n * The empty graph is over the path set of the SVG.\n * Initially, there are no edges.\n *\n * @param   {Object}  graphic - An object containing the SVG document,\n * paths and their bounding boxes.\n *\n * @return  {Object}  Has properties nodes and links. One node per path\n * and an empty list for links.\n */\nfunction createEmptyGraph(graphic) {\n  const { width, height } = getWidthHeight(graphic.svg.properties);\n  const nPaths = graphic.paths.length;\n  const minRadius = 100 / (8 * nPaths);\n  let nodes = graphic.paths.map((path, i) => {\n    const x = Math.random() * width;\n    const y = Math.random() * height;\n    const pathWidth = graphic.bboxes[i].width;\n    const pathHeight = graphic.bboxes[i].height;\n    const ratio = (pathWidth * pathHeight) / (width * height);\n    return {\n      id: i,\n      x,\n      y,\n      type: \"path\",\n      fill: \"#f3f9fb\",\n      radius: minRadius + ratio * minRadius,\n      paths: [i],\n      children: [],\n      visible: 1\n    };\n  });\n  let links = [];\n  const graph = { nodes, links };\n  return updateVisualProperties(graph, graphic);\n}\n\n/*\n * Calculates the radius of a given node.\n *\n * In the GraphHandler component, there are nodes\n * corresponding to subsets of SVG paths.\n *\n * The radius depends on the ratio between the\n * area of the path subset of the node and the\n * area of the entire viewbox. Additionally, it\n * also dependents on the graph.\n *\n * @param   {Object}  node - node whose radius is to be calculated.\n * @param   {Object}  graph - radius is weighted by the depth of the node\n * in the graph. This is to make sure that deeper nodes look smaller.\n * @param   {Object}  graphic - graphic\n *\n * @return  {Number}  Radius for the node with these pathIds.\n */\nfunction nodeRadius(node, graph, graphic) {\n  const pathIds = node.paths;\n  const { bboxes, svg } = graphic;\n  const { nodes } = graph;\n  const relevantBoxes = pathIds.map(id => bboxes[id]);\n  const box = coveringBBox(relevantBoxes);\n  const svgBox = getWidthHeight(svg.properties);\n  const ratio = Math.min(box.height / svgBox.height, box.width / svgBox.width);\n  const numRoots = nodes.filter(node => isRoot(node.id, graph)).length;\n  const minRadius = Math.sqrt(Math.max(9.0, 100 / numRoots));\n  const r = minRadius + ratio * minRadius;\n  return r;\n}\n\n/*\n * Check whether node can be added as a child of another node.\n *\n * For this to be allowed, the node being added to has to be\n * a group node, the added node must be the root node of its\n * subtree and their paths shouldn't intersect.\n *\n * @param   {Object}  node - query node.\n * @param   {Object}  to - target node.\n *\n * @return  {Boolean}  Whether the merger can happen.\n */\nfunction canAddNodeAsChild({ node, to } = {}) {\n  if (to.type === \"group\" && typeof node.parent === \"undefined\") {\n    const nodePaths = node.paths;\n    const toPaths = to.paths;\n    return disjoint(nodePaths, toPaths);\n  }\n  return false;\n}\n\n/*\n * Delete link from forest.\n *\n * Disconnecting the two nodes in the forest\n * may have a ripple effect and may lead to\n * clearance of many other links since no\n * tree in the forest is allowed to have\n * less than two children.\n *\n * @param   {Object}  forest - Collection of trees.\n * @param   {Number}  linkId - Link index to be deleted.\n *\n * @returns {Object}  New Forest.\n */\nfunction deleteLinkFromForest(forest, linkId) {\n  let graph = cloneDeep(forest);\n  let { nodes, links } = graph;\n  const groupId = links[linkId].source.id;\n\n  // Deleting a node can lead to a chain reaction\n  // where a lot of other nodes are deleted. This\n  // is because no group node can have less than\n  // two children. I go up the tree, following the\n  // parent link and add all those nodes which would\n  // be deleted.\n  let nodesToBeDeleted = [];\n  let nodeId = groupId;\n  while (typeof nodeId !== \"undefined\") {\n    if (nodes[nodeId].children.length <= 2) {\n      nodesToBeDeleted.push(nodeId);\n    } else {\n      break;\n    }\n    nodeId = nodes[nodeId].parent;\n  }\n\n  nodes[groupId].children.splice(\n    nodes[groupId].children.indexOf(links[linkId].target.id),\n    1\n  );\n\n  let linksToBeDeleted = links\n    .filter(\n      l =>\n        nodesToBeDeleted.includes(l.source.id) ||\n        nodesToBeDeleted.includes(l.target.id)\n    )\n    .map(l => links.indexOf(l));\n  linksToBeDeleted.push(linkId);\n\n  for (let i = 0; i < linksToBeDeleted.length; i++) {\n    const link = links[linksToBeDeleted[i]];\n    nodes[link.target.id].parent = undefined;\n  }\n\n  nodes = nodes.filter((_, i) => !nodesToBeDeleted.includes(i));\n  links = links.filter((_, i) => !linksToBeDeleted.includes(i));\n\n  // After deleting the nodes and links, have to\n  // reset the ids to be consistent with the array\n  // ordering. Also have to ensure that the\n  // paths, children, parent fields are updated.\n  const idMap = {};\n  for (let i = 0; i < nodes.length; i++) {\n    idMap[nodes[i].id] = i;\n  }\n\n  for (let i = 0; i < nodes.length; i++) {\n    nodes[i].id = idMap[nodes[i].id];\n    nodes[i].index = nodes[i].id;\n    nodes[i].children = nodes[i].children\n      .filter(cId => !nodesToBeDeleted.includes(cId))\n      .map(cId => idMap[cId]);\n    if (typeof nodes[i].parent !== \"undefined\") {\n      nodes[i].parent = idMap[nodes[i].parent];\n    }\n  }\n\n  for (let i = 0; i < links.length; i++) {\n    links[i].index = i;\n  }\n\n  nodes = gatherSubtreePaths(nodes);\n\n  graph.nodes = nodes;\n  graph.links = links;\n\n  return graph;\n}\n\n/*\n * Add node as child of other nearby node.\n *\n * If the given node intersects with a node,\n * then if possible, it should be added as a\n * child node of the other node.\n *\n * Of course, the other node has to be a group\n * node for this to be possible.\n *\n * @param   {Object}  forest - The forest.\n * @param   {Object}  nodeId - Id of node that\n * is potentially going to be added as a child node.\n *\n * @returns {Object}  New forest.\n */\nfunction addNodeAsChildIfNearby(forest, nodeId) {\n  let graph = cloneDeep(forest);\n  const thisNode = graph.nodes[nodeId];\n  const closeNodes = graph.nodes.filter(\n    node =>\n      distance(thisNode, node) < thisNode.radius + node.radius &&\n      node.id !== nodeId\n  );\n  if (closeNodes.length === 1) {\n    const thatNode = closeNodes.pop();\n    if (canAddNodeAsChild({ node: thisNode, to: thatNode })) {\n      thisNode.parent = thatNode.id;\n      thatNode.children.push(nodeId);\n      thatNode.paths = thatNode.paths.concat(thisNode.paths);\n      graph.links.push({\n        source: thatNode.id,\n        target: thisNode.id,\n        type: \"group\"\n      });\n    }\n  }\n  return graph;\n}\n\n/*\n * Add group node with nodes as children if possible.\n *\n * @param   {Object}  forest - The forest.\n * @param   {Array}   nodes - List of nodes to be grouped.\n *\n * @returns {Object}  New forest.\n */\nfunction groupNodes(forest, nodes) {\n  const graph = cloneDeep(forest);\n  const nNodes = graph.nodes.length;\n  const paths = nodes.map(id => graph.nodes[id].paths).flat();\n  if (nodes.length >= 2) {\n    graph.nodes.push({\n      id: nNodes,\n      x: 0,\n      y: 0,\n      type: \"group\",\n      fill: nodeColors.group,\n      radius: 0,\n      paths,\n      children: nodes,\n      visible: 1\n    });\n    nodes.forEach(id => {\n      graph.links.push({ source: nNodes, target: id, type: \"group\" });\n      graph.nodes[id].parent = nNodes;\n    });\n  }\n  return graph;\n}\n\n/*\n * Compute fill attribute of graph nodes.\n *\n * Nodes can have two possible fill values\n * depending on whether they are contracted or not.\n *\n * @param   {Object}  graph - graph object.\n *\n * @returns {Object}  Graph with updated node fill.\n */\nfunction computeFill(graph) {\n  const { nodes } = graph;\n  for (let id = 0; id < nodes.length; id++) {\n    const node = nodes[id];\n    node.fill = node.contracted ? node.contractedGroup : nodeColors.group;\n  }\n  return graph;\n}\n\n/*\n * Compute radius of graph nodes.\n *\n * @param   {Object}  graph - graph object.\n * @param   {Object}  graphic - graphic object.\n *\n * @returns {Object}  Graph with updated node radii.\n */\nfunction computeNodeRadii(graph, graphic) {\n  const { nodes } = graph;\n  for (let id = 0; id < nodes.length; id++) {\n    const node = nodes[id];\n    node.radius = nodeRadius(node, graph, graphic);\n  }\n  return graph;\n}\n\n/**\n * Update visual properties of the graph.\n *\n * Each time the graph is updated, its visual properties\n * such as the radius of the nodes and fills have to\n * be recalculated.\n *\n * @param   {Object}  graph - graph object.\n * @param   {Object}  graphic - graphic object.\n *\n * @returns {Object}  Graph with updated visual properties.\n */\nfunction updateVisualProperties(forest, graphic) {\n  let graph = cloneDeep(forest);\n  graph = computeFill(graph);\n  graph = computeNodeRadii(graph, graphic);\n  return graph;\n}\n\n/**\n * Determine whether the node is a root of some tree\n *\n * Basically, check whether parent is undefined. If\n * it is return true, else false.\n *\n * @param   {Number}  node - node id.\n * @param   {Object}  graph - graph object.\n *\n * @returns {Boolean}  Whether the node is a root.\n */\nfunction isRoot(node, graph) {\n  return typeof graph.nodes[node].parent === \"undefined\";\n}\n\n/**\n * Find the root with this node in its subtree.\n *\n * @param   {Number}  node - node id.\n * @param   {Object}  graph - graph object.\n *\n * @returns {Numeber}  Id of the root.\n */\nfunction findRoot(node, graph) {\n  while (!isRoot(node, graph)) {\n    node = graph.nodes[node].parent;\n  }\n  return node;\n}\n\nfunction isTree (graph) {\n  const { nodes } = graph;\n  const roots = nodes.filter((node, id) => isRoot(id, graph))\n  return roots.length === 1;\n}\n\nexport {\n  depth,\n  connected,\n  createEmptyGraph,\n  nodeRadius,\n  descendants,\n  canAddNodeAsChild,\n  deleteLinkFromForest,\n  addNodeAsChildIfNearby,\n  groupNodes,\n  updateVisualProperties,\n  isRoot,\n  findRoot,\n  connectedComponents,\n  isTree\n};\n","import React, { Component } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Spinner from \"react-bootstrap/Spinner\"; \nimport GraphicDisplay from \"./graphicdisplay\";\nimport { preprocessSVG, convertCoordinates } from \"../utils/svg\";\nimport { cloneDeep } from \"lodash\";\nimport { createEmptyGraph, } from \"../utils/graph\";\nimport { ReactComponent as Crop } from \"../icons/scissors.svg\";\nimport IconButton from \"./iconbutton\";\nimport { isUndef } from \"../utils/misc\";\n\nfunction skipClear(props) {\n  const { disableClear } = props;\n  return !isUndef(disableClear) && disableClear;\n}\n\n// encodes the interpretation of click within the \n// rectangle annotation. That is, are we dragging the \n// corner, the edge or moving around the whole rectangle\nconst RECTANGLE_CLICK_TYPES = [\n  { type: 'TOP_LEFT', move: 'corner' },\n  { type: 'TOP', move: 'edge' },\n  { type: 'TOP_RIGHT', move: 'corner' }, \n  { type: 'LEFT', move: 'edge' }, \n  { type: 'WHOLE', move: 'rect' }, \n  { type: 'RIGHT', move: 'edge' }, \n  { type: 'BOTTOM_LEFT', move: 'corner' }, \n  { type: 'BOTTOM', move: 'edge'},\n  { type: 'BOTTOM_RIGHT', move: 'corner' },\n]\n\nconst CLICK_TYPE_PCT = 0.2; \n\nfunction mapClickToClickType (click, rect) { \n  const { x, y } = click; \n  const { x: rx, y: ry, width, height } = rect;\n\n  const dx = (x - rx) / width; \n  const dy = (y - ry) / height;\n\n  const col = (dx < CLICK_TYPE_PCT) ? 0 : ((dx > 1.0 - CLICK_TYPE_PCT) ? 2 : 1); \n  const row = (dy < CLICK_TYPE_PCT) ? 0 : ((dy > 1.0 - CLICK_TYPE_PCT) ? 2 : 1); \n\n  return RECTANGLE_CLICK_TYPES[3 * row + col]; \n}\n\nfunction makeRectFromOppositeCorners(cx, cy, ox, oy) {\n  const width = Math.abs(ox - cx); \n  const height = Math.abs(oy - cy); \n  const x = Math.min(ox, cx); \n  const y = Math.min(oy, cy); \n  return { width, height, x, y };\n}\n\nfunction updatedAnnotation (click, initClickData) { \n  const { initAnnotation, initClick, dragType } = initClickData; \n  const { x: ix, y: iy } = initClick; \n  const { x: rx, y: ry, width, height } = initAnnotation; \n  if (dragType.move === 'rect') {\n    const dx = rx - ix; \n    const dy = ry - iy; \n    const nx = click.x + dx; \n    const ny = click.y + dy; \n    return { x: nx, y: ny, width, height }\n  } else if (dragType.move === 'corner') {\n    let ox, oy, cx, cy; \n    switch(dragType.type) {\n      case 'TOP_LEFT' :\n        cx = rx;\n        cy = ry; \n        ox = rx + width; \n        oy = ry + height; \n        break; \n      case 'TOP_RIGHT' :\n        cx = rx + width; \n        cy = ry; \n        ox = rx; \n        oy = ry + height; \n        break;\n      case 'BOTTOM_LEFT' : \n        cx = rx;\n        cy = ry + height; \n        ox = rx + width; \n        oy = ry; \n        break;\n      case 'BOTTOM_RIGHT' : \n        cx = rx + width; \n        cy = ry + height; \n        ox = rx;\n        oy = ry; \n        break;\n      default :\n        cx = cy = ox = oy = 0;\n        break;\n    }\n    const dx = cx - ix; \n    const dy = cy - iy; \n    cx = click.x + dx;\n    cy = click.y + dy; \n    return makeRectFromOppositeCorners (cx, cy, ox, oy) ;\n  } else { \n    // dragType.move === 'edge'\n    if (dragType.type === 'LEFT') { \n      const dx = rx - ix;\n      const nx = click.x + dx;\n      return { x: nx, y: ry, width: (rx + width - nx), height }; \n    } else if (dragType.type === 'RIGHT') {\n      const dx = rx + width - ix;\n      const nx = click.x + dx;\n      return { x: rx, y: ry, width: (nx - rx), height }; \n    } else if (dragType.type === 'TOP') { \n      const dy = ry - iy;\n      const ny = click.y + dy;\n      return { x: rx, y: ny, width, height: (ry + height - ny) }; \n    } else { \n      const dy = ry + height - iy;\n      const ny = click.y + dy;\n      return { x: rx, y: ry, width, height: (ny - ry) }; \n    }\n  }\n}\n\nclass GroupUI extends Component {\n  /*\n   * Set the initial state of the component.\n   *\n   * This is just a formality because the state\n   * would be over-written when the component mounts\n   * because there, we can do an AJAX call to retrieve\n   * an SVG from the server.\n   *\n   * Here we use a placeholder SVG string.\n   */\n  constructor(props) {\n    super(props);\n    const graphic = preprocessSVG('<svg height=\"100\" width=\"100\"></svg>');\n    const graph = createEmptyGraph(graphic, { nodes: {}, links: {} });\n    this.fileInputRef = React.createRef(); \n    this.state = {\n      graphic,\n      graph,\n      hover: [],\n      selected: [],\n      filename: \"\",\n      svgString: '<svg height=\"100\" width=\"100\"></svg>',\n      nothingIn: false, \n      imageURL: undefined, \n      imageWidth: undefined, \n      imageHeight: undefined,\n      selectedFile: undefined,\n      annotations: [],\n      clickRegistry: undefined,\n      dragActive: false, \n      cursorMoved: false\n    };\n  }\n\n  handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const imageURL = URL.createObjectURL(file);\n      const graphic = preprocessSVG('<svg height=\"100\" width=\"100\"></svg>');\n      this.setState({ selectedFile: file, imageURL, graphic });\n\n      const img = new Image();\n      img.onload = () => {\n        this.setState({ imageWidth: img.width, imageHeight: img.height });\n      };\n      img.src = imageURL;\n    }\n  };\n\n  openFileDialog = () => {\n    this.fileInputRef.current.click();\n  }\n\n  handleDragOver = (event) => {\n    event.preventDefault();\n  }\n\n  handleDrop = (event) => {\n    event.preventDefault();\n    const files = event.dataTransfer.files;\n    if (files.length) {\n      this.handleFiles(files);\n    }\n  };\n\n  handleFiles = (files) => {\n    // Handle the files\n  };\n\n  /*\n   * When the component mounts, add an event listener for\n   * click. Any click which isn't caught by a child element\n   * of window will be caught here and whatever has been\n   * selected by the user would be cleared\n   */\n  componentDidMount() {\n    fetch('/upload.svg')\n      .then((response) => response.text())\n      .then((response) => this.setState({ graphic: preprocessSVG(response) })); \n    \n    window.addEventListener(\"click\", this.handleClear);\n    window.addEventListener(\"keydown\", this.handleKeyPress); \n  }\n\n  /*\n   * When the component unmounts, remove the click\n   * event listener.\n   */\n  componentWillUnmount() {\n    if (!isUndef(this.props.setHighlight)) {\n      const { setHighlight, setShowNext } = this.props;\n      setHighlight(false); \n      setShowNext(false); \n    }\n    window.removeEventListener(\"click\", this.handleClear);\n    window.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  handleKeyPress = (evt) => {\n    if (evt.key === 'Backspace' || evt.key === 'Delete') {\n      this.setState((prevState) => {\n        const { selected, annotations } = prevState; \n        let newAnnotations = cloneDeep(annotations); \n        for (let i = 0; i < selected.length; i++) {\n          newAnnotations[selected[i]] = undefined; \n        }\n        return { annotations: newAnnotations, selected: [] };\n      }); \n    }\n  }\n\n  tryNotifyParent = (msg) => {\n    const { notifyParent } = this.props;\n    if (!isUndef(notifyParent)) {\n      notifyParent(msg);\n    }\n  };\n\n  uploadImageAndClick = (file, click, clickIndex) => { \n    this.setState({ nothingIn: true }); \n    const formData = new FormData();\n    formData.append(\"image\", file);\n    formData.append(\"click\", JSON.stringify(click));\n    fetch(this.props.target, { \n      method: \"POST\",\n      body: formData,\n    })\n    .then(response => response.json())\n    .then(data => {\n      this.setState((prevState) => {\n        const { annotations } = prevState; \n        let newAnnotations = cloneDeep(annotations); \n        newAnnotations[clickIndex] = undefined; \n        newAnnotations.push({ type: 'rectangle', ...data }); \n        return { nothingIn: false, annotations: newAnnotations }; \n      }); \n    })\n  }\n\n  /*\n   * Handle Click event on a particular node.\n   *\n   * Whenever a click event occurs in either the svg handler or\n   * the graph handler, this function is called. By clicking on\n   * nodes, they either get selected/de-selected according to\n   * whether they were de-selected or selected earlier.\n   *\n   * A node cannot be selected if it's ancestor or descendent is\n   * already selected.\n   *\n   * @param   {Number}  id - Id of the node on which\n   * the event was fired.\n   */\n  handleClick = (event) => {\n    const x = event.clientX; \n    const y = event.clientY; \n    this.setState((prevState) => {\n      const { annotations, dragActive, selectedFile } = prevState; \n      if (isUndef(selectedFile)) { \n        this.openFileDialog();\n      } else {\n        if (!dragActive) {\n          const clickPoint = convertCoordinates('svg-element', x, y);\n          const newAnnotations = [...annotations, { type: \"point\", ...clickPoint }];\n          this.uploadImageAndClick(prevState.selectedFile, clickPoint, annotations.length); \n          return { annotations: newAnnotations };\n        }\n      }\n    });\n  };\n\n  handleMouseOverSvg = (event) => {\n    const click = convertCoordinates('svg-element', event.clientX, event.clientY); \n    this.setState((prevState) => {\n      const { dragActive } = prevState; \n      if (dragActive) { \n        const { clickRegistry, annotations } = prevState; \n        const newAnnotations = cloneDeep(annotations); \n        newAnnotations[clickRegistry.index] = updatedAnnotation(click, clickRegistry); \n        return { annotations: newAnnotations, cursorMoved: true }; \n      }\n    }); \n  }; \n\n  handlePointerOver = (id) => {\n  };\n\n  handlePointerLeave = (id) => {\n  };\n\n  handleCropClick = (event) => {\n    const { selectedFile, annotations } = this.state;\n    let rectangleAnnotations = annotations.filter((x) => (!isUndef(x))); \n    // rectangleAnnotations = rectangleAnnotations.filter((x) => (x.type === 'rectangle')); \n    const formData = new FormData();\n    formData.append(\"image\", selectedFile);\n    formData.append(\"annot\", JSON.stringify(rectangleAnnotations));\n    fetch('/cropper', { \n      method: \"POST\",\n      body: formData,\n    })\n      .then(response => response.blob())\n      .then(blob => {\n        const url = window.URL.createObjectURL(new Blob([blob]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', 'crops.zip');\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n        window.URL.revokeObjectURL(url);\n      }); \n  };\n\n  handleDragStartRect = (evt, annotation, index) => {\n    const click = convertCoordinates('svg-element', evt.clientX, evt.clientY);\n    this.setState((prevState) => {\n      const { dragActive } = prevState; \n      if (dragActive) {\n        return {}; \n      }\n      const clickData = {\n        dragType: mapClickToClickType(click, annotation), \n        initClick: click, \n        initAnnotation: annotation,\n        index: index\n      }\n      return { clickRegistry: clickData, dragActive: true }; \n    }); \n  }\n\n  handleDragRect = (evt, annotation, index) => {\n    const click = convertCoordinates('svg-element', evt.clientX, evt.clientY);\n    this.setState((prevState) => {\n      const { dragActive, clickRegistry, annotations } = prevState; \n      if (dragActive) { \n        const newAnnotations = cloneDeep(annotations); \n        newAnnotations[clickRegistry.index] = updatedAnnotation(click, clickRegistry); \n        return { annotations: newAnnotations, cursorMoved: true }; \n      }\n    }); \n  }\n\n  handleClickRect = (evt, annotation, index) => {\n    this.setState((prevState) => {\n      const { selected, cursorMoved } = prevState; \n      if (!cursorMoved) { \n        if (selected.includes(index)) {\n          return { selected: selected.filter((i) => i !== index) }; \n        } else {\n          return { selected: [...selected, index] }; \n        }\n      }\n    }); \n  }\n\n  handleDragEndRect = (evt, annotation, index) => {\n    this.setState((prevState) => {\n      if (prevState.cursorMoved) { \n        setTimeout(() => {\n          this.setState({ cursorMoved: false }); \n        }, 100); \n      }\n      return { clickRegistry: undefined, dragActive: false }\n    });\n  }\n\n  /*\n   * Clear the selections.\n   *\n   * Whenever any useless part of the window\n   * is clicked, de-select all the selected paths.\n   * This is what happens in a lot of graphics\n   * editors.\n   */\n  handleClear = (event) => {\n    if (skipClear(this.props)) return;\n    const selected = [];\n    this.setState({ selected });\n    this.tryNotifyParent({ type: \"clear\" });\n  };\n\n  render() {\n    let { highlightSvg, highlightGroup, highlightGraph } = this.props;\n    if (this.state.nothingIn) {\n      return (\n        <Row className=\"py-3 align-items-center\">\n          <Col className=\"d-flex justify-content-center\">\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </Spinner>\n          </Col>\n        </Row>\n      );\n    }\n    if (isUndef(highlightSvg)) highlightSvg = [];\n    if (isUndef(highlightGraph)) highlightGraph = [];\n    if (isUndef(highlightGroup)) highlightGroup = false;\n\n    return (\n      <>\n        <input\n          ref={this.fileInputRef}\n          type=\"file\"\n          onChange={this.handleFileChange}\n          style={{ display: 'none' }}\n        />\n        <Row className=\"mt-2 mb-4\">\n          <Col className=\"d-flex justify-content-center\">\n            <GraphicDisplay\n              graphic={this.state.graphic}\n              graph={this.state.graph}\n              imageWidth={this.state.imageWidth}\n              imageHeight={this.state.imageHeight}\n              imageURL={this.state.imageURL} \n              selected={this.state.selected}\n              annotations={this.state.annotations}\n              hover={this.state.hover}\n              onClick={this.handleClick}\n              onPointerOver={this.handlePointerOver}\n              onPointerLeave={this.handlePointerLeave}\n              highlight={highlightSvg}\n              onDragStartRect={this.handleDragStartRect}\n              onDragRect={this.handleDragRect}\n              onDragEndRect={this.handleDragEndRect}\n              onClickRect={this.handleClickRect} \n              onMouseOverSvg={this.handleMouseOverSvg}\n              onClickCross={this.props.onClickCross}\n            />\n          </Col>\n        </Row>\n        <Row className=\"border-top\">\n          <Col>\n            <IconButton\n              name=\"Crop\"\n              active={true}\n              onClick={this.handleCropClick}\n              // highlight={highlightCrop}\n            >\n              <Crop />\n            </IconButton>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default GroupUI;\n","import React, { Component } from \"react\";\nimport Nav from \"./nav\";\nimport GroupUI from \"./groupui\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\n\nclass Slides extends Component {\n  constructor (props) {\n    super(props);\n    this.state = { crossClicked: false };\n  }\n\n  handleCrossClick = () => {\n    this.setState((prevState) => {\n      setTimeout(() => {\n        this.setState({ crossClicked: false }); \n      }, 200); \n      return { crossClicked: true }; \n    }); \n  }\n\n  render () {\n    const { crossClicked } = this.state; \n    return (\n      <>\n        <Nav />\n        <Container id=\"app-container\">\n          <Row className=\"slide-content\">\n            {crossClicked ? <></> : <GroupUI target=\"/inference\" onClickCross={this.handleCrossClick} />}\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Slides;\n","import React, { Component } from \"react\";\nimport Slides from \"./components/slides\";\n\nclass App extends Component {\n\n  render() {\n    return <Slides />;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/style.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","function isUndef (thing) {\n  return typeof thing === \"undefined\"; \n}\n\nexport { isUndef }; \n","/**\n * @file Tags for all the graphic elements in an SVG.\n *\n * @author Sumit Chaturvedi\n */\n\nconst svgTags = [\n  \"circle\",\n  \"ellipse\",\n  \"image\",\n  \"line\",\n  \"mesh\",\n  \"path\",\n  \"polygon\",\n  \"polyline\",\n  \"rect\",\n  \"text\",\n  \"use\"\n];\n\nexport { svgTags };\n","/**\n * @file Functions related the SVGs.\n *\n * @author Sumit Chaturvedi\n */\nimport { svgTags } from \"./svgtags\";\nimport { parse } from \"svg-parser\";\nimport { propertiesToCamelCase } from \"./reacthelpers\";\n\n/**\n * Calculate the height or width from the SVG \n * document property. \n *\n * It is possible that the units are in px. This\n * convenience function extracts all the digits.\n *\n * @param   {Object}  dim - SVG document property for either\n * width or height.\n * \n * @return  {Number}  Extracted width or height value.\n */\nfunction extractDims(dim) {\n  if (typeof dim === \"string\") {\n    return dim.replace(/\\D/g, \"\");\n  } else {\n    return dim;\n  }\n}\n\n/**\n * Parse the SVG document's viewbox.\n *\n * @param   {string}  vb - Viewbox of the SVG.\n *\n * @return  {Object}  List of 4 numbers specifying the \n * viewbox.\n */\nfunction extractViewBox(vb) {\n  return vb.split(/ |,|, /).map(parseFloat);\n}\n\n/**\n * Calculate the width and height of the SVG document.\n *\n * @param   {Object}  props - SVG document properties. \n *\n * @return  {Object}  { width, height } as numbers.\n */\nfunction getWidthHeight(props) {\n  let height, width;\n  if (props.height) {\n    height = extractDims(props.height);\n  }\n  if (props.width) {\n    width = extractDims(props.width);\n  }\n  if (!props.height && !props.width) {\n    const vb = extractViewBox(props.viewBox);\n    width = vb[2] - vb[0];\n    height = vb[3] - vb[1];\n  }\n  return { width, height };\n}\n\n/**\n * Modify the graphic such that the SVG's viewbox \n * is a square and the original graphic window is\n * placed in the middle of the square.\n *\n * Since we might have arbitrary vector graphics\n * in our database, it makes sense to normalize them\n * by making them fit in a square so that they are \n * rendered properly on the browser.\n *\n * @param   {Object}  graphic - The SVG document representation.\n *\n * @return  {Object}  Graphic object whose height and width have\n * been made equal.\n */\nfunction normalizeGraphic(graphic) {\n  let { svg, paths, bboxes, defs } = graphic;\n  if (svg.properties.viewBox) {\n    const vb = extractViewBox(svg.properties.viewBox);\n    if (vb[2] < vb[3]) {\n      svg.properties.viewBox = `${vb[0] - (vb[3] - vb[2]) / 2} ${vb[1]} ${\n        vb[3]\n      } ${vb[3]}`;\n    } else {\n      svg.properties.viewBox = `${vb[0]} ${vb[1] - (vb[2] - vb[3]) / 2} ${\n        vb[2]\n      } ${vb[2]}`;\n    }\n  }\n  if (svg.properties.height && svg.properties.width) {\n    const h = extractDims(svg.properties.height);\n    const w = extractDims(svg.properties.width);\n    const max = Math.max(h, w);\n    svg.properties.height = max;\n    svg.properties.width = max;\n    svg.properties.viewBox = `0 0 ${max} ${max}`;\n  }\n  return { svg, paths, bboxes, defs };\n}\n\n/**\n * Find the bounding box of a path.\n *\n * 1. Create a temporary SVG element in browser. \n * 2. Add the path to that SVG element.\n * 3. Use the browser function getBBox to calculate\n *    the bounding box.\n * 4. Clean up the temporary element.\n *\n * @param   {Object}  path - SVG path.\n *\n * @return  {Object}  A bounding box for the path.\n */\nfunction findBBox(path, viewBox) {\n  const svgElement = document.createElementNS(\n    \"http://www.w3.org/2000/svg\",\n    \"svg\"\n  );\n  svgElement.setAttribute(\"id\", \"temp-svg\");\n  document.body.appendChild(svgElement);\n  const pathElement = document.createElementNS(\n    \"http://www.w3.org/2000/svg\",\n    path.tagName\n  );\n  for (const p in path.properties) {\n    pathElement.setAttribute(p, path.properties[p]);\n  }\n  svgElement.appendChild(pathElement);\n  const pathBox = svgElement.lastChild.getBoundingClientRect();\n  const { x, y, height, width } = pathBox; \n  const pt = convertCoordinates('temp-svg', x, y);  \n  const di = convertDimensions('temp-svg', width, height);\n  svgElement.removeChild(pathElement);\n  svgElement.remove();\n  return { ...pt, ...di };\n}\n\n/**\n * Extract the paths from SVG parse tree.\n *\n * While flattening the parse tree, it is ensured that the inherited properties\n * are set correctly.\n *\n * @param   {Object}  tree - SVG parse tree.\n *\n * @return  {Object}  The object consists of an svg and a paths\n * property. The svg property stores information about the whole\n * document. The paths property is a list of paths.\n */\nfunction flattenTree(tree) {\n  let stack = [];\n  let elements = [];\n  let defs = undefined;\n  const helper = node => {\n    if (node.tagName === \"defs\") {\n      defs = node;\n      return;\n    }\n    stack.push(node.properties);\n    const properties = stack.reduceRight(function(a, b) {\n      return { ...b, ...a };\n    });\n    let { children, ...rest } = node;\n    if (svgTags.includes(rest.tagName) || rest.tagName === \"svg\") {\n      rest.properties = properties;\n      elements.push(rest);\n    } \n    children.forEach(helper);\n    stack.pop();\n  };\n  helper(tree);\n  const paths = elements.slice(1); \n  return { svg: elements[0], paths, defs };\n}\n\n/**\n * Check whether bounding box is simply a point.\n * \n * Many times, the paths in the document will\n * have no geometry. Such paths are useless \n * for our purpose. \n *\n * We detect them by determining whether they\n * occupy 0 area or not. \n *\n * @param   {Object}  bbox - Bounding box.\n *\n * @return  {boolean} True if bounding box is simply a point.\n */\nfunction degenerateBBox(bbox) {\n  return bbox.width === 0 && bbox.height === 0;\n}\n\nfunction treeMap (node, fn) {\n  node = fn(node); \n  if (node.children) {\n    node.children = node.children.map(c => treeMap(c, fn));\n  }\n  return node;\n}\n\n/**\n * Process an SVG string.\n *\n * This function performs a bunch of operations\n * on the SVG string fetched from the database.\n *\n * 1. The string is parsed.\n * 2. The parse tree is flattened. We are only concerned\n *    with the paths in the SVG. Flattening the parse tree\n *    makes it more convenient to index the paths.\n * 3. Bounding boxes are computed for the paths.\n * 4. The SVG properties are converted to camel case\n *    so that they match React's requirements for \n *    jsx elements.\n * 5. Finally, the SVG is normalized to fit into a \n *    square viewbox.\n *\n * @param   {string}  svgString - SVG document as a string.\n *\n * @return  {object}  A graphic object having the SVG, it's\n * paths and their bounding boxes as properties.\n */\nfunction preprocessSVG(svgString) {\n  const parseTree = parse(svgString).children[0];\n  let { svg, paths, defs } = flattenTree(parseTree);\n  let bboxes = paths.map(path => findBBox(path, svg.properties.viewBox));\n  paths = paths.filter((_, i) => !degenerateBBox(bboxes[i]));\n  bboxes = bboxes.filter(b => !degenerateBBox(b));\n  svg = propertiesToCamelCase(svg);\n  if (typeof defs !== \"undefined\") {\n    defs = treeMap(defs, propertiesToCamelCase);\n  }\n  paths = paths.map(propertiesToCamelCase);\n  return normalizeGraphic({ svg, paths, bboxes, defs });\n}\n\n/**\n * Calculate a bounding box which covers all the input \n * bounding boxes.\n *\n * This function is used when we want to compute the \n * bounding box for a set of paths which have been \n * grouped by the user.\n *\n * @param   {Object}  bboxes - List of bounding boxes\n *\n * @return  {Object}  The smallest bounding box which\n * covers all bboxes.\n */\nfunction coveringBBox(bboxes) {\n  const x = Math.min(...bboxes.map(b => b.x));\n  const y = Math.min(...bboxes.map(b => b.y));\n  const maxX = Math.max(...bboxes.map(b => b.x + b.width));\n  const maxY = Math.max(...bboxes.map(b => b.y + b.height));\n  const height = maxY - y;\n  const width = maxX - x;\n  return { x, y, height, width };\n}\n\n/**\n * Calculate the center of a box.\n *\n * @param   {Object}  box - Must have x, y, width and height\n * properties.\n *\n * @return  {Object}  The center point as { cx, cy }\n */\nfunction boxCenter(box) {\n  const cx = box.x + box.width / 2;\n  const cy = box.y + box.height / 2;\n  return { cx, cy };\n}\n\n/**\n * Calculate euclidean distance between two points in 2D.\n *\n * @param   {Object}  a - Point a given as { x, y }.\n * @param   {Object}  b - Point b.\n *\n * @return  {Number}  Euclidean distance.\n */\nfunction distance(a, b) {\n  const d = { x: a.x - b.x, y: a.y - b.y };\n  return Math.sqrt(d.x * d.x + d.y * d.y);\n}\n\n/**\n * Convert coordinates from the document's\n * to the element's whose id is supplied.\n *\n * Used to convert event coordinates on a \n * particular element.\n *\n * @param   {string}  elementId - Id of element\n * @param   {Number}  x - x coordinate of the point.\n * @param   {Number}  y - y coordinate of the point.\n *\n * @return  {Object}  The transformed point with x and y\n * properties.\n */\nfunction convertCoordinates(elementId, x, y) {\n  const ctm = document.getElementById(elementId).getScreenCTM();\n  return { x: (x - ctm.e) / ctm.a, y: (y - ctm.f) / ctm.d };\n}\n\nfunction convertDimensions(elementId, width, height) {\n  const ctm = document.getElementById(elementId).getScreenCTM();\n  return { width : width / ctm.a, height: height / ctm.d };\n}\n\nfunction isStyleNotNone(styleProperty, properties) {\n  if (typeof properties[styleProperty] === \"undefined\") {\n    if (typeof properties.style === \"undefined\") return true;\n    else return properties.style[styleProperty].toLowerCase() !== \"none\";\n  }\n  return properties[styleProperty].toLowerCase() !== \"none\";\n}\n\nexport {\n  getWidthHeight,\n  preprocessSVG,\n  coveringBBox,\n  boxCenter,\n  distance,\n  convertCoordinates,\n  isStyleNotNone,\n};\n"],"sourceRoot":""}